// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata/gentest/only_unary_exec.proto

package gentest

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OnlyExec struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnlyExec) Reset()         { *m = OnlyExec{} }
func (m *OnlyExec) String() string { return proto.CompactTextString(m) }
func (*OnlyExec) ProtoMessage()    {}
func (*OnlyExec) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b02875758c0cf4b, []int{0}
}

func (m *OnlyExec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnlyExec.Unmarshal(m, b)
}
func (m *OnlyExec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnlyExec.Marshal(b, m, deterministic)
}
func (m *OnlyExec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnlyExec.Merge(m, src)
}
func (m *OnlyExec) XXX_Size() int {
	return xxx_messageInfo_OnlyExec.Size(m)
}
func (m *OnlyExec) XXX_DiscardUnknown() {
	xxx_messageInfo_OnlyExec.DiscardUnknown(m)
}

var xxx_messageInfo_OnlyExec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OnlyExec)(nil), "gentest.OnlyExec")
}

func init() {
	proto.RegisterFile("testdata/gentest/only_unary_exec.proto", fileDescriptor_0b02875758c0cf4b)
}

var fileDescriptor_0b02875758c0cf4b = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0x49, 0x2d, 0x2e,
	0x49, 0x49, 0x2c, 0x49, 0xd4, 0x4f, 0x4f, 0xcd, 0x03, 0xb1, 0xf5, 0xf3, 0xf3, 0x72, 0x2a, 0xe3,
	0x4b, 0xf3, 0x12, 0x8b, 0x2a, 0xe3, 0x53, 0x2b, 0x52, 0x93, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0xd8, 0xa1, 0xd2, 0x4a, 0x5c, 0x5c, 0x1c, 0xfe, 0x79, 0x39, 0x95, 0xae, 0x15, 0xa9, 0xc9,
	0x46, 0xce, 0x5c, 0xfc, 0x30, 0x76, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x01, 0x17,
	0x9b, 0x67, 0x5e, 0x71, 0x6a, 0x51, 0x89, 0x90, 0xa0, 0x1e, 0x54, 0x8b, 0x1e, 0x4c, 0x8d, 0x14,
	0xa6, 0x90, 0x12, 0x83, 0x93, 0x4d, 0x94, 0x55, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72,
	0x7e, 0xae, 0x7e, 0x56, 0x62, 0x72, 0x76, 0x71, 0x76, 0x96, 0x3e, 0xd8, 0xd6, 0x64, 0xdd, 0xf4,
	0xd4, 0x3c, 0xdd, 0xdc, 0xc4, 0x02, 0x7d, 0x74, 0x57, 0x5a, 0x43, 0xe9, 0x24, 0x36, 0xb0, 0x42,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xac, 0x81, 0x4f, 0xc8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OnlyExecServiceClient is the client API for OnlyExecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnlyExecServiceClient interface {
	Insert(ctx context.Context, in *OnlyExec, opts ...grpc.CallOption) (*OnlyExec, error)
}

type onlyExecServiceClient struct {
	cc *grpc.ClientConn
}

func NewOnlyExecServiceClient(cc *grpc.ClientConn) OnlyExecServiceClient {
	return &onlyExecServiceClient{cc}
}

func (c *onlyExecServiceClient) Insert(ctx context.Context, in *OnlyExec, opts ...grpc.CallOption) (*OnlyExec, error) {
	out := new(OnlyExec)
	err := c.cc.Invoke(ctx, "/gentest.OnlyExecService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnlyExecServiceServer is the server API for OnlyExecService service.
type OnlyExecServiceServer interface {
	Insert(context.Context, *OnlyExec) (*OnlyExec, error)
}

// UnimplementedOnlyExecServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOnlyExecServiceServer struct {
}

func (*UnimplementedOnlyExecServiceServer) Insert(ctx context.Context, req *OnlyExec) (*OnlyExec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}

func RegisterOnlyExecServiceServer(s *grpc.Server, srv OnlyExecServiceServer) {
	s.RegisterService(&_OnlyExecService_serviceDesc, srv)
}

func _OnlyExecService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlyExec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnlyExecServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gentest.OnlyExecService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnlyExecServiceServer).Insert(ctx, req.(*OnlyExec))
	}
	return interceptor(ctx, in, info, handler)
}

var _OnlyExecService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gentest.OnlyExecService",
	HandlerType: (*OnlyExecServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _OnlyExecService_Insert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/gentest/only_unary_exec.proto",
}
