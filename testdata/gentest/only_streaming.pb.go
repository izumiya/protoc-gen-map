// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata/gentest/only_streaming.proto

package gentest

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OnlyStreaming struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnlyStreaming) Reset()         { *m = OnlyStreaming{} }
func (m *OnlyStreaming) String() string { return proto.CompactTextString(m) }
func (*OnlyStreaming) ProtoMessage()    {}
func (*OnlyStreaming) Descriptor() ([]byte, []int) {
	return fileDescriptor_642c62d06470383b, []int{0}
}

func (m *OnlyStreaming) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnlyStreaming.Unmarshal(m, b)
}
func (m *OnlyStreaming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnlyStreaming.Marshal(b, m, deterministic)
}
func (m *OnlyStreaming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnlyStreaming.Merge(m, src)
}
func (m *OnlyStreaming) XXX_Size() int {
	return xxx_messageInfo_OnlyStreaming.Size(m)
}
func (m *OnlyStreaming) XXX_DiscardUnknown() {
	xxx_messageInfo_OnlyStreaming.DiscardUnknown(m)
}

var xxx_messageInfo_OnlyStreaming proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OnlyStreaming)(nil), "gentest.OnlyStreaming")
}

func init() {
	proto.RegisterFile("testdata/gentest/only_streaming.proto", fileDescriptor_642c62d06470383b)
}

var fileDescriptor_642c62d06470383b = []byte{
	// 155 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x49, 0x2d, 0x2e,
	0x49, 0x49, 0x2c, 0x49, 0xd4, 0x4f, 0x4f, 0xcd, 0x03, 0xb1, 0xf5, 0xf3, 0xf3, 0x72, 0x2a, 0xe3,
	0x8b, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x33, 0xf3, 0xd2, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0xd8, 0xa1, 0xb2, 0x4a, 0xfc, 0x5c, 0xbc, 0xfe, 0x79, 0x39, 0x95, 0xc1, 0x30, 0x79, 0xa3, 0x10,
	0x2e, 0x11, 0x14, 0x81, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x1b, 0x2e, 0x36, 0x88,
	0x98, 0x90, 0x98, 0x1e, 0x54, 0xb3, 0x1e, 0x8a, 0x42, 0x29, 0x1c, 0xe2, 0x4a, 0x0c, 0x06, 0x8c,
	0x4e, 0x36, 0x51, 0x56, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x59,
	0x89, 0xc9, 0xd9, 0xc5, 0xd9, 0x59, 0xfa, 0x60, 0xb7, 0x24, 0xeb, 0xa6, 0xa7, 0xe6, 0xe9, 0xe6,
	0x26, 0x16, 0xe8, 0xa3, 0x3b, 0xdd, 0x1a, 0x4a, 0x27, 0xb1, 0x81, 0x15, 0x1a, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x2b, 0x76, 0x17, 0x8d, 0xdd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OnlyStreamingServiceClient is the client API for OnlyStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OnlyStreamingServiceClient interface {
	Stream(ctx context.Context, in *OnlyStreaming, opts ...grpc.CallOption) (OnlyStreamingService_StreamClient, error)
}

type onlyStreamingServiceClient struct {
	cc *grpc.ClientConn
}

func NewOnlyStreamingServiceClient(cc *grpc.ClientConn) OnlyStreamingServiceClient {
	return &onlyStreamingServiceClient{cc}
}

func (c *onlyStreamingServiceClient) Stream(ctx context.Context, in *OnlyStreaming, opts ...grpc.CallOption) (OnlyStreamingService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OnlyStreamingService_serviceDesc.Streams[0], "/gentest.OnlyStreamingService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &onlyStreamingServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OnlyStreamingService_StreamClient interface {
	Recv() (*OnlyStreaming, error)
	grpc.ClientStream
}

type onlyStreamingServiceStreamClient struct {
	grpc.ClientStream
}

func (x *onlyStreamingServiceStreamClient) Recv() (*OnlyStreaming, error) {
	m := new(OnlyStreaming)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OnlyStreamingServiceServer is the server API for OnlyStreamingService service.
type OnlyStreamingServiceServer interface {
	Stream(*OnlyStreaming, OnlyStreamingService_StreamServer) error
}

// UnimplementedOnlyStreamingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOnlyStreamingServiceServer struct {
}

func (*UnimplementedOnlyStreamingServiceServer) Stream(req *OnlyStreaming, srv OnlyStreamingService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterOnlyStreamingServiceServer(s *grpc.Server, srv OnlyStreamingServiceServer) {
	s.RegisterService(&_OnlyStreamingService_serviceDesc, srv)
}

func _OnlyStreamingService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnlyStreaming)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OnlyStreamingServiceServer).Stream(m, &onlyStreamingServiceStreamServer{stream})
}

type OnlyStreamingService_StreamServer interface {
	Send(*OnlyStreaming) error
	grpc.ServerStream
}

type onlyStreamingServiceStreamServer struct {
	grpc.ServerStream
}

func (x *onlyStreamingServiceStreamServer) Send(m *OnlyStreaming) error {
	return x.ServerStream.SendMsg(m)
}

var _OnlyStreamingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gentest.OnlyStreamingService",
	HandlerType: (*OnlyStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _OnlyStreamingService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "testdata/gentest/only_streaming.proto",
}
