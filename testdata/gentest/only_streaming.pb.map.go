// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testdata/gentest/only_streaming.proto

package gentest

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"

	//protoc-gen-map packages
	bytes "bytes"
	sql "database/sql"
	sprig "github.com/Masterminds/sprig"
	mapper "github.com/jackskj/protoc-gen-map/mapper"
	mappertmpl "github.com/jackskj/protoc-gen-map/templates"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	log "log"
	sync "sync"
	template "text/template"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Code generated by protoc-gen-map. DO NOT EDIT.
// To Use:
// 1. Instantiate MapperServers with sql.DB connection
// 2. Register MapperServer as the gRPC service server
// 3. Begin serving

type OnlyStreamingServiceMapServer struct {
	DB           *sql.DB
	StreamMapper *mapper.Mapper

	mapperGenMux sync.Mutex
}

func (m *OnlyStreamingServiceMapServer) Stream(r *OnlyStreaming, stream OnlyStreamingService_StreamServer) error {
	sqlBuffer := &bytes.Buffer{}
	if err := sqlTemplate.ExecuteTemplate(sqlBuffer, "Stream", r); err != nil {
		return status.Error(codes.InvalidArgument, err.Error())
	}
	rawSql := sqlBuffer.String()
	rows, err := m.DB.Query(rawSql)
	if err != nil {
		log.Printf("error executing query.\n OnlyStreaming request: %s \n,query: %s \n error: %s", r, rawSql, err)
		return status.Error(codes.InvalidArgument, "request generated malformed query")
	} else {
		defer rows.Close()
	}
	if m.StreamMapper == nil {
		m.mapperGenMux.Lock()
		m.StreamMapper, err = mapper.New(rows, &OnlyStreaming{})
		m.mapperGenMux.Unlock()
		if err != nil {
			log.Printf("error generating StreamMapper: %s", err)
			return status.Error(codes.Internal, "error generating OnlyStreaming mapping")
		}
		m.StreamMapper.Log()
	}
	respMap := m.StreamMapper.NewResponseMapping()
	if err := m.StreamMapper.GetValues(rows, respMap); err != nil {
		log.Printf("error loading data for Stream: %s", err)
		return status.Error(codes.Internal, "error loading data")
	}
	if err := m.StreamMapper.MapResponse(respMap); err != nil {
		log.Printf("error mappig StreamMapper: %s", err)
		m.StreamMapper.Error = nil
		return status.Error(codes.Internal, "error mappig OnlyStreaming")
	}
	m.StreamMapper.Log()
	for _, resp := range respMap.Responses {
		if err := stream.Send(resp.(*OnlyStreaming)); err != nil {
			return err
		}
	}
	return nil
}

var sqlTemplate, _ = template.New("sqlTemplate").Funcs(sprig.TxtFuncMap()).Funcs(mappertmpl.Funcs()).Parse(`
{{ define "EmptyService" }}
{{ end }}
{{ define "Stream" }}
{{ end }}
{{ define "Insert" }}
{{ end }}
{{ define "Query" }}
{{ end }}
{{ define "ExecOne" }}
{{ end }}
{{ define "ExecTwo" }}
{{ end }}
{{ define "ExecThree" }}
{{ end }}
{{ define "ExecFour" }}
{{ end }}
{{ define "ExecFive" }}
{{ end }}
{{ define "Insert" }}
{{ end }}
{{ define "InSeRt" }}
{{ end }}
{{ define "Insert" }}
{{ end }}
{{ define "Delete" }}
{{ end }}
{{ define "Update" }}
{{ end }}
{{ define "Create" }}
{{ end }}
{{ define "SubDirectoryTest" }}
{{ end }}

`)
